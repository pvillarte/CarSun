// <auto-generated />
using System;
using CarSun.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarSun.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230328194143_v2")]
    partial class v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarSun.Data.Mappings.Serie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MarcaId")
                        .HasMaxLength(30)
                        .HasColumnType("int")
                        .HasColumnName("Marca_Id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.ToTable("Series", (string)null);
                });

            modelBuilder.Entity("CarSun.Models.Acabado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ModeloId")
                        .HasColumnType("int")
                        .HasColumnName("Modelo_Id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("ModeloId");

                    b.ToTable("Acabados", (string)null);
                });

            modelBuilder.Entity("CarSun.Models.AcabadoEquipamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcabadoId")
                        .HasColumnType("int")
                        .HasColumnName("Acabado_Id");

                    b.Property<int>("EquipamientoId")
                        .HasColumnType("int")
                        .HasColumnName("Equipamiento_Id");

                    b.Property<bool>("Opcional")
                        .HasColumnType("bit")
                        .HasColumnName("Opcional");

                    b.HasKey("Id");

                    b.HasIndex("AcabadoId");

                    b.HasIndex("EquipamientoId");

                    b.ToTable("Acabados_Equipamientos", (string)null);
                });

            modelBuilder.Entity("CarSun.Models.Equipamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Equipamientos", (string)null);
                });

            modelBuilder.Entity("CarSun.Models.EquipamientoVehiculo", b =>
                {
                    b.Property<int>("EquipamientoId")
                        .HasColumnType("int")
                        .HasColumnName("Equipamiento_Id");

                    b.Property<int>("VehiculoId")
                        .HasColumnType("int")
                        .HasColumnName("Vehiculo_Id");

                    b.HasKey("EquipamientoId", "VehiculoId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("Equipamientos_Vehiculos", (string)null);
                });

            modelBuilder.Entity("CarSun.Models.Generacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2")
                        .HasColumnName("Fecha_Fin");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2")
                        .HasColumnName("Fecha_Inicio");

                    b.Property<int>("Iteracion")
                        .HasColumnType("int")
                        .HasColumnName("Iteracion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nombre");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("Serie_Id");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.ToTable("Generaciones", (string)null);
                });

            modelBuilder.Entity("CarSun.Models.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Nombre");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Pais");

                    b.HasKey("Id");

                    b.ToTable("Marcas", (string)null);
                });

            modelBuilder.Entity("CarSun.Models.Modelo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Alto")
                        .HasColumnType("int")
                        .HasColumnName("Alto");

                    b.Property<int>("Ancho")
                        .HasColumnType("int")
                        .HasColumnName("Ancho");

                    b.Property<int>("Carroceria")
                        .HasColumnType("int")
                        .HasColumnName("Carroceria");

                    b.Property<int?>("GeneracionId")
                        .HasColumnType("int")
                        .HasColumnName("Generacion_Id");

                    b.Property<int>("Largo")
                        .HasColumnType("int")
                        .HasColumnName("Largo");

                    b.Property<int>("Maletero")
                        .HasColumnType("int")
                        .HasColumnName("Maletero");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Nombre");

                    b.Property<int>("Plazas")
                        .HasColumnType("int")
                        .HasColumnName("Plazas");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasColumnName("Serie_Id");

                    b.HasKey("Id");

                    b.HasIndex("GeneracionId");

                    b.HasIndex("SerieId");

                    b.ToTable("Modelos", (string)null);
                });

            modelBuilder.Entity("CarSun.Models.ModeloMotor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Aceleracion")
                        .HasColumnType("int")
                        .HasColumnName("Aceleracion");

                    b.Property<int>("Deposito")
                        .HasColumnType("int")
                        .HasColumnName("Deposito");

                    b.Property<int>("ModeloId")
                        .HasColumnType("int")
                        .HasColumnName("Modelo_Id");

                    b.Property<int>("MotorId")
                        .HasColumnType("int")
                        .HasColumnName("Motor_Id");

                    b.Property<int>("Par")
                        .HasColumnType("int")
                        .HasColumnName("Par");

                    b.Property<int>("Potencia")
                        .HasColumnType("int")
                        .HasColumnName("Potencia");

                    b.Property<int>("RPMPar")
                        .HasColumnType("int")
                        .HasColumnName("RPM_Par");

                    b.Property<int>("RPMPotencia")
                        .HasColumnType("int")
                        .HasColumnName("RPM_Potencia");

                    b.Property<int>("VelocidadMaxima")
                        .HasColumnType("int")
                        .HasColumnName("Velocidad_Maxima");

                    b.HasKey("Id");

                    b.HasIndex("ModeloId");

                    b.HasIndex("MotorId");

                    b.ToTable("Modelos_Motores", (string)null);
                });

            modelBuilder.Entity("CarSun.Models.Motor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Alimentacion")
                        .HasColumnType("int")
                        .HasColumnName("Alimentacion");

                    b.Property<int?>("Cilindros")
                        .HasColumnType("int")
                        .HasColumnName("Cilindros");

                    b.Property<int?>("Configuracion")
                        .HasColumnType("int")
                        .HasColumnName("Configuracion");

                    b.Property<int?>("Cubicaje")
                        .HasColumnType("int")
                        .HasColumnName("Cubicaje");

                    b.Property<string>("Especificacion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Especificacion");

                    b.Property<int>("Hibridacion")
                        .HasColumnType("int")
                        .HasColumnName("Hibridacion");

                    b.Property<int?>("Sobrealimentacion")
                        .HasColumnType("int")
                        .HasColumnName("Sobrealimentacion");

                    b.Property<int>("TipoMotor")
                        .HasColumnType("int")
                        .HasColumnName("Tipo_Motor");

                    b.Property<int?>("Valvulas")
                        .HasColumnType("int")
                        .HasColumnName("Valvulas");

                    b.HasKey("Id");

                    b.ToTable("Motores", (string)null);
                });

            modelBuilder.Entity("CarSun.Models.NEDC", b =>
                {
                    b.Property<int>("ModeloMotorId")
                        .HasColumnType("int")
                        .HasColumnName("Modelo_Motor_Id");

                    b.Property<decimal>("CicloCombinado")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("Ciclo_Combinado");

                    b.Property<decimal>("CicloExtraurbano")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("Ciclo_Extraurbano");

                    b.Property<decimal>("CicloUrbano")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("Ciclo_Urbano");

                    b.Property<int>("Emisiones")
                        .HasColumnType("int")
                        .HasColumnName("Emisiones");

                    b.HasKey("ModeloMotorId");

                    b.ToTable("NEDCs", (string)null);
                });

            modelBuilder.Entity("CarSun.Models.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcabadoId")
                        .HasColumnType("int")
                        .HasColumnName("Acabado_Id");

                    b.Property<int>("Cambio")
                        .HasColumnType("int")
                        .HasColumnName("Cambio");

                    b.Property<int>("Color")
                        .HasColumnType("int")
                        .HasColumnName("Color");

                    b.Property<int>("Etiqueta")
                        .HasColumnType("int")
                        .HasColumnName("Etiqueta");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2")
                        .HasColumnName("Fecha");

                    b.Property<int>("Kms")
                        .HasColumnType("int")
                        .HasColumnName("Kms");

                    b.Property<int>("ModeloId")
                        .HasColumnType("int")
                        .HasColumnName("Modelo_Id");

                    b.Property<int>("MotorId")
                        .HasColumnType("int")
                        .HasColumnName("Motor_Id");

                    b.Property<int?>("Relaciones")
                        .HasColumnType("int")
                        .HasColumnName("Relaciones");

                    b.Property<int>("Traccion")
                        .HasColumnType("int")
                        .HasColumnName("Traccion");

                    b.HasKey("Id");

                    b.HasIndex("AcabadoId");

                    b.HasIndex("ModeloId");

                    b.HasIndex("MotorId");

                    b.ToTable("Vehiculos", (string)null);
                });

            modelBuilder.Entity("CarSun.Models.WLTP", b =>
                {
                    b.Property<int>("ModeloMotorId")
                        .HasColumnType("int")
                        .HasColumnName("Modelo_Motor_Id");

                    b.Property<decimal>("CicloAlto")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("Ciclo_Alto");

                    b.Property<decimal>("CicloBajo")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("Ciclo_Bajo");

                    b.Property<decimal>("CicloCombinado")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("Ciclo_Combinado");

                    b.Property<decimal>("CicloExtraAlto")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("Ciclo_Extra_Alto");

                    b.Property<decimal>("CicloMedio")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("Ciclo_Medio");

                    b.Property<int>("Emisiones")
                        .HasColumnType("int")
                        .HasColumnName("Emisiones");

                    b.HasKey("ModeloMotorId");

                    b.ToTable("WLTPs", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarSun.Data.Mappings.Serie", b =>
                {
                    b.HasOne("CarSun.Models.Marca", "Marca")
                        .WithMany("Series")
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("CarSun.Models.Acabado", b =>
                {
                    b.HasOne("CarSun.Models.Modelo", "Modelo")
                        .WithMany("Acabados")
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("CarSun.Models.AcabadoEquipamiento", b =>
                {
                    b.HasOne("CarSun.Models.Acabado", "Acabado")
                        .WithMany("AcabadoEquipamientos")
                        .HasForeignKey("AcabadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarSun.Models.Equipamiento", "Equipamiento")
                        .WithMany("EquipamientoAcabados")
                        .HasForeignKey("EquipamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acabado");

                    b.Navigation("Equipamiento");
                });

            modelBuilder.Entity("CarSun.Models.EquipamientoVehiculo", b =>
                {
                    b.HasOne("CarSun.Models.Equipamiento", "Equipamiento")
                        .WithMany("EquipamientoVehiculos")
                        .HasForeignKey("EquipamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarSun.Models.Vehiculo", "Vehiculo")
                        .WithMany("VehiculoEquipamientos")
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipamiento");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("CarSun.Models.Generacion", b =>
                {
                    b.HasOne("CarSun.Data.Mappings.Serie", "Serie")
                        .WithMany("Generaciones")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("CarSun.Models.Modelo", b =>
                {
                    b.HasOne("CarSun.Models.Generacion", "Generacion")
                        .WithMany("Modelos")
                        .HasForeignKey("GeneracionId");

                    b.HasOne("CarSun.Data.Mappings.Serie", "Serie")
                        .WithMany("Modelos")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Generacion");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("CarSun.Models.ModeloMotor", b =>
                {
                    b.HasOne("CarSun.Models.Modelo", "Modelo")
                        .WithMany("ModeloMotores")
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarSun.Models.Motor", "Motor")
                        .WithMany("MotorModelos")
                        .HasForeignKey("MotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modelo");

                    b.Navigation("Motor");
                });

            modelBuilder.Entity("CarSun.Models.NEDC", b =>
                {
                    b.HasOne("CarSun.Models.ModeloMotor", "ModeloMotor")
                        .WithOne("NEDC")
                        .HasForeignKey("CarSun.Models.NEDC", "ModeloMotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModeloMotor");
                });

            modelBuilder.Entity("CarSun.Models.Vehiculo", b =>
                {
                    b.HasOne("CarSun.Models.Acabado", "Acabado")
                        .WithMany("Vehiculos")
                        .HasForeignKey("AcabadoId");

                    b.HasOne("CarSun.Models.Modelo", "Modelo")
                        .WithMany("Vehiculos")
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarSun.Models.Motor", "Motor")
                        .WithMany("Vehiculos")
                        .HasForeignKey("MotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acabado");

                    b.Navigation("Modelo");

                    b.Navigation("Motor");
                });

            modelBuilder.Entity("CarSun.Models.WLTP", b =>
                {
                    b.HasOne("CarSun.Models.ModeloMotor", "ModeloMotor")
                        .WithOne("WLTP")
                        .HasForeignKey("CarSun.Models.WLTP", "ModeloMotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModeloMotor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarSun.Data.Mappings.Serie", b =>
                {
                    b.Navigation("Generaciones");

                    b.Navigation("Modelos");
                });

            modelBuilder.Entity("CarSun.Models.Acabado", b =>
                {
                    b.Navigation("AcabadoEquipamientos");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("CarSun.Models.Equipamiento", b =>
                {
                    b.Navigation("EquipamientoAcabados");

                    b.Navigation("EquipamientoVehiculos");
                });

            modelBuilder.Entity("CarSun.Models.Generacion", b =>
                {
                    b.Navigation("Modelos");
                });

            modelBuilder.Entity("CarSun.Models.Marca", b =>
                {
                    b.Navigation("Series");
                });

            modelBuilder.Entity("CarSun.Models.Modelo", b =>
                {
                    b.Navigation("Acabados");

                    b.Navigation("ModeloMotores");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("CarSun.Models.ModeloMotor", b =>
                {
                    b.Navigation("NEDC");

                    b.Navigation("WLTP");
                });

            modelBuilder.Entity("CarSun.Models.Motor", b =>
                {
                    b.Navigation("MotorModelos");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("CarSun.Models.Vehiculo", b =>
                {
                    b.Navigation("VehiculoEquipamientos");
                });
#pragma warning restore 612, 618
        }
    }
}
